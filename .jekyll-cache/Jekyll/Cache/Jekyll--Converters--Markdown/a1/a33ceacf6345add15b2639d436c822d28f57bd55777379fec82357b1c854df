I"L1<blockquote>
  <p>本文为原创</p>
</blockquote>

<h2 id="part-a-多处理器支持和多任务协作">Part A: 多处理器支持和多任务协作</h2>

<p>在本实验的第一部分，你需要扩展 JOS 以使其能在多处理器系统上运行，然后实现一些新的 JOS 内核系统调用，以允许用户级环境创建其他新环境（环境类似进程）。你还需要实现协作轮转调度(cooperative round-robin scheduling)，在当前环境自愿放弃 CPU（或退出）时，允许内核从一种环境切换到另一种环境。在之后的 C 部分，你将实现抢占式调度，该调度使内核可以在经过一定时间后从环境重新获得对 CPU 的控制，即使环境不合作也是如此。</p>

<h3 id="多处理器支持">多处理器支持</h3>

<p>JOS支持“symmetric multiprocessing”（SMP），SMP 是一种多处理器模型，其中所有 CPU 都具有对系统资源（例如内存和 I / O 总线）的同等访问权限。尽管所有 CPU 在 SMP 中在功能上都是相同的，但是在引导过程中，它们可以分为两种类型：引导处理器（BSP）负责初始化系统和引导操作系统；只有在操作系统启动并运行后，BSP 才会激活应用程序处理器（AP）。BSP 的处理器是由硬件和 BIOS 决定的。到目前为止，你现在所有的JOS代码都已在 BSP 上运行。</p>

<p>在SMP系统中，每个 CPU 都有一个 local APIC（LAPIC）单元。LAPIC 单元负责在整个系统中传递中断。LAPIC 还为其连接的CPU提供唯一的标识符。在本实验中，我们利用 LAPIC 单元的以下基本功能（在 kern/lapic.c 中）：</p>

<ul>
  <li>
    <p>读取 LAPIC 标识符（APIC ID）以了解我们的代码当前在哪个 CPU 上运行（请参阅 cpunum()）。</p>
  </li>
  <li>
    <p>从 BSP 发送启动处理器间中断（IPI）到 AP 以启动其他 CPU（请参阅 lapic_startap()）。</p>
  </li>
  <li>
    <p>在 C 部分中，我们对 LAPIC 的内置计时器进行编程，通过触发时钟中断来支持抢先式多任务处理（请参阅apic_init()）。</p>
  </li>
</ul>

<p>处理器使用 memory-mapped I/O (MMIO) 访问其 LAPIC。在 MMIO 中，一部分物理内存会直接存入某些 I/O 设备的寄存器，因此通常用于访问内存的相同加载/存储指令可使用设备寄存器访问。你已经在物理地址 0xA0000 上看到了一个 I/O 区域（我们使用它来写入 VGA 显示缓冲区），输出缓冲区是 0xf00b8000。LAPIC 位于一个从地址 0xFE000000（比 4GB 少 32MB）开始的区域中，因此对于我们来说，直接映射到 KERNBASE 的空间很大。在 JOS 虚拟内存中映射了一个 4MB 空间的 <code class="language-plaintext highlighter-rouge">MMIOBASE</code>，所以我们有地方映射这样的设备。由于以后的实验会介绍更多的MMIO 区域，因此您需要编写一个简单的函数来从该区域分配空间并将设备内存映射到该区域。</p>

<h4 id="exercise-1">Exercise 1</h4>

<p>在 <code class="language-plaintext highlighter-rouge">kern/pmap.c</code> 中实现 <code class="language-plaintext highlighter-rouge">mmio_map_region</code>。要了解其用法，请查看 <code class="language-plaintext highlighter-rouge">kern/lapic.c</code> 中 <code class="language-plaintext highlighter-rouge">lapic_init</code> 的开头。在测试 mmio_map_region 之前，你必须先做下一个练习。</p>

<p>mmio_map_region 的代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">size</span> <span class="o">=</span> <span class="n">ROUNDUP</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">PGSIZE</span><span class="p">);</span>
    <span class="k">if</span><span class="p">((</span><span class="n">base</span> <span class="o">+</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="n">MMIOLIM</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="n">base</span><span class="p">))</span>
        <span class="n">panic</span><span class="p">(</span><span class="s">"Overflow in mmio region"</span><span class="p">);</span>
    <span class="n">boot_map_region</span><span class="p">(</span><span class="n">kern_pgdir</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">pa</span><span class="p">,</span> <span class="n">PTE_PCD</span> <span class="o">|</span> <span class="n">PTE_PWT</span> <span class="o">|</span> <span class="n">PTE_W</span><span class="p">);</span>
    <span class="n">base</span> <span class="o">+=</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// base是全局变量，同时它将保存mmio中的可用空间的首地址</span>
    <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">base</span> <span class="o">-</span> <span class="n">size</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="application-processor-bootstrap">Application Processor Bootstrap</h4>

<p>在启动 AP 之前，BSP 应该首先收集有关多处理器系统的信息，例如 CPU 的总数，它们的 APIC ID 和 LAPIC 单元的 MMIO 地址。<code class="language-plaintext highlighter-rouge">kern/mpconfig.c</code> 中的 <code class="language-plaintext highlighter-rouge">mp_init()</code> 函数通过读取驻留在 BIOS 内存区域中的 MP 配置表来检索此信息。</p>

<p><code class="language-plaintext highlighter-rouge">boot_aps()</code> 函数(在 <code class="language-plaintext highlighter-rouge">kern/init.c</code> 中)驱动 AP 引导进程。AP 在实模式下启动，就像引导加载程序在 <code class="language-plaintext highlighter-rouge">boot/boot.S</code> 中启动的方式一样，因此 <code class="language-plaintext highlighter-rouge">boot_aps()</code> 将 AP 入口代码 (<code class="language-plaintext highlighter-rouge">kern/mpentry.S</code>) 复制到可在实模式下寻址的内存位置。与引导加载程序不同，我们可以控制AP从何处开始执行代码。我们将代码复制到 <code class="language-plaintext highlighter-rouge">0x7000</code>(<code class="language-plaintext highlighter-rouge">MPENTRY_PADDR</code>)，尽管在低位640KB的内存的任何未使用的，与页面对齐的物理地址都可以使用。</p>

<p>之后，<code class="language-plaintext highlighter-rouge">boot_aps()</code> 通过向相应 AP 的 LAPIC 单元发送 <code class="language-plaintext highlighter-rouge">STARTUP IPI</code> 以及一个初始 <code class="language-plaintext highlighter-rouge">CS:IP</code> 地址来依次激活AP，并且 AP 应该从 <code class="language-plaintext highlighter-rouge">MPENTRY_PADDR</code> 处开始运行。<code class="language-plaintext highlighter-rouge">kern/mpentry.S</code> 中的入口代码与 <code class="language-plaintext highlighter-rouge">boot/boot.S</code> 的入口代码非常相似。进行一些简单的设置后，它将使 AP 进入启用分页的保护模式，然后调用C设置例程 <code class="language-plaintext highlighter-rouge">mp_main()</code> (也在 <code class="language-plaintext highlighter-rouge">kern/init.c</code> 中)。<code class="language-plaintext highlighter-rouge">boot_aps()</code>等待 AP 在其 <code class="language-plaintext highlighter-rouge">struct CpuInfo</code> 的 cpu_status 字段中发 <code class="language-plaintext highlighter-rouge">CPU_STARTED</code> 信号，然后再继续唤醒下一个。</p>

<h5 id="exercise-2">Exercise 2</h5>

<p>阅读 <code class="language-plaintext highlighter-rouge">kern/init.c</code> 中的 <code class="language-plaintext highlighter-rouge">boot_aps()</code> 和 <code class="language-plaintext highlighter-rouge">mp_main()</code>，以及 <code class="language-plaintext highlighter-rouge">kern/mpentry.S</code> 中的汇编代码。确保您了解 AP 引导程序的控制流转换过程。然后在 <code class="language-plaintext highlighter-rouge">kern/pmap.c</code> 中修改您对 <code class="language-plaintext highlighter-rouge">page_init()</code> 的实现，以避免将 <code class="language-plaintext highlighter-rouge">MPENTRY_PADDR</code> 所在的页面被添加到空闲列表中，以便我们可以安全地在该物理地址复制并运行 AP 引导程序代码。你的代码应该能够通过被更新的 <code class="language-plaintext highlighter-rouge">check_page_free_list()</code> 的测试（但可能无法通过 <code class="language-plaintext highlighter-rouge">check_kern_pgdir()</code> 的测试）。</p>

<p>page_init 应该修改为下面：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span>
<span class="nf">page_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">npages</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_ref</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_link</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">PGSIZE</span> <span class="o">&gt;=</span> <span class="n">IOPHYSMEM</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">PGSIZE</span> <span class="o">&lt;=</span> <span class="n">PADDR</span><span class="p">(</span><span class="n">boot_alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span> <span class="p">{</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_ref</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_link</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">PGSIZE</span> <span class="o">==</span> <span class="n">MPENTRY_PADDR</span><span class="p">)</span> <span class="p">{</span>  
            <span class="c1">// 这里是标记 MPENTRY_PADDR 所在的物理页</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_ref</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_link</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_ref</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pp_link</span> <span class="o">=</span> <span class="n">page_free_list</span><span class="p">;</span>
            <span class="n">page_free_list</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pages</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">make qemu-nox</code> 出现如下，无法通过 <code class="language-plaintext highlighter-rouge">check_kern_pgdir()</code> 的测试：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">check_page_free_list</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page_alloc</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">kernel</span> <span class="n">panic</span> <span class="n">on</span> <span class="n">CPU</span> <span class="mi">0</span> <span class="n">at</span> <span class="n">kern</span><span class="o">/</span><span class="n">pmap</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">852</span><span class="o">:</span> <span class="n">assertion</span> <span class="n">failed</span><span class="o">:</span> <span class="n">check_va2pa</span><span class="p">(</span><span class="n">pgdir</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="n">KSTKGAP</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="n">PADDR</span><span class="p">(</span><span class="n">percpu_kstacks</span><span class="p">[</span><span class="n">n</span><span class="p">])</span> <span class="o">+</span> <span class="n">i</span>
</code></pre></div></div>

<h5 id="question-1">Question 1</h5>

<p>对比 <code class="language-plaintext highlighter-rouge">kern/mpentry.S</code> 与 <code class="language-plaintext highlighter-rouge">boot/boot.S</code>。请记住，<code class="language-plaintext highlighter-rouge">kern/mpentry.S</code> 就像内核中的所有其他内容一样经过编译和链接，在 <code class="language-plaintext highlighter-rouge">KERNBASE</code> 之上运行，宏 <code class="language-plaintext highlighter-rouge">MPBOOTPHYS</code> 的作用是什么？为什么在 <code class="language-plaintext highlighter-rouge">kern/mpentry.S</code> 中有必要，但在 <code class="language-plaintext highlighter-rouge">boot/boot.S</code> 中却没有？换句话说，如果在 <code class="language-plaintext highlighter-rouge">kern/mpentry.S</code> 中省略了它，那会出什么问题？</p>

<p>提示：回忆一下我们在实验1中讨论的链接地址和加载地址之间的区别。</p>

<p>通过响应来自启动 CPU 的 STARTUP IPI 信号，来启动每个非启动 CPU (<code class="language-plaintext highlighter-rouge">AP</code>)。 AP 将在实模式下启动，并将 <code class="language-plaintext highlighter-rouge">CS:IP</code>设置为 <code class="language-plaintext highlighter-rouge">XY00:0000</code>，其中 XY 是随 STARTUP 发送的 8 位值。 因此，此代码必须从 4096 字节边界开始。</p>

<p>因为此代码将 DS 设置为零，所以它必须从低 2 ^ 16 字节物理内存中的地址开始运行。</p>

<p>boot_aps() (在 init.c 中)将此代码复制到 <code class="language-plaintext highlighter-rouge">MPENTRY_PADDR</code> (满足上述限制)。 然后，对于每个 AP，它将预先分配的每个内核堆栈的地址存储在 <code class="language-plaintext highlighter-rouge">mpentry_kstack</code> 中，发送 <code class="language-plaintext highlighter-rouge">STARTUP IPI</code>，并等待此代码确认它已启动(在 init.c 中的 <code class="language-plaintext highlighter-rouge">mp_main</code> 中发生)。</p>

<p>此代码类似于 boot/boot.S，除了</p>

<ul>
  <li>不需要启用 A20</li>
  <li>它使用 <code class="language-plaintext highlighter-rouge">MPBOOTPHYS</code> 来计算其绝对地址</li>
  <li>依赖于符号，而不是依靠链接器填充它们</li>
</ul>

<p>AP 是从实模式下开始运行，所以需要通过 MPBOOTPHYS 宏的转换虚拟地址，运行这部分代码。boot.S 中不需要这个转换是因为代码的本来就被加载在实模式可以寻址的地方。</p>

<h4 id="per-cpu-state-and-initialization">Per-CPU State and Initialization</h4>

<p>编写多处理器 OS 时，区分每个处理器专用的 CPU 状态和整个系统共享的全局状态是非常重要的。<code class="language-plaintext highlighter-rouge">kern/cpu.h</code> 定义了CPU的大多数状态，包括存储每个 CPU 变量的 <code class="language-plaintext highlighter-rouge">struct CpuInfo</code> 结构。<code class="language-plaintext highlighter-rouge">cpunum()</code>始终返回调用它的 CPU 的 ID，该 ID 可用作 <code class="language-plaintext highlighter-rouge">cpus</code> 这样的数组的索引。 另外，宏 <code class="language-plaintext highlighter-rouge">thiscpu</code> 是当前 CPU 的 <code class="language-plaintext highlighter-rouge">struct CpuInfo</code> 的简写。</p>

<p>这是你应注意的 CPU 状态：</p>

<ul>
  <li>
    <p>Per-CPU kernel stack<br />
  由于多个 CPU 可以进入内核中，因此我们需要为每个处理器使用单独的内核堆栈，以防止它们干扰彼此的执行。数组<code class="language-plaintext highlighter-rouge">percpu_kstacks[NCPU][KSTKSIZE]</code>为 NCPU 的内核堆栈保留了空间。</p>

    <p>在实验 2 中，你映射了 BSP 内核堆栈的物理内存 <code class="language-plaintext highlighter-rouge">bootstack</code>，在 <code class="language-plaintext highlighter-rouge">KSTACKTOP</code> 的下方。 同样，在本实验中，您将把每个CPU 的内核堆栈映射到该区域，其中保护页充当它们之间的缓冲区。 CPU 0的堆栈仍将从 <code class="language-plaintext highlighter-rouge">KSTACKTOP</code> 增长； CPU 1 的堆栈将从 CPU 0 的堆栈底部开始的 <code class="language-plaintext highlighter-rouge">KSTKGAP</code> 字节后开始，依此类推。 <code class="language-plaintext highlighter-rouge">inc/memlayout.h</code> 显示了映射布局。</p>
  </li>
  <li>
    <p>Per-CPU TSS and TSS descriptor<br />
  为了指定每个 CPU 的内核堆栈所在的位置，还需要每个 CPU 的任务状态段 (TSS)。 CPU i 的 TSS 存储在 <code class="language-plaintext highlighter-rouge">cpus[i].cpu_ts</code> 中，并且相应的 TSS 描述符在 GDT 条目 <code class="language-plaintext highlighter-rouge">gdt[(GD_TSS0 &gt;&gt; 3)+ i]</code> 中定义。 在 <code class="language-plaintext highlighter-rouge">kern/trap.c</code>中定义的全局 ts 变量将不再有用。</p>
  </li>
  <li>
    <p>Per-CPU current environment pointer<br />
  由于每个 CPU 可以同时运行不同的用户进程，因此我们将符号 <code class="language-plaintext highlighter-rouge">curenv</code> 重新定义为引用 <code class="language-plaintext highlighter-rouge">cpus[cpunum()].cpu_env</code>(或 <code class="language-plaintext highlighter-rouge">thiscpu-&gt;cpu_env</code>)，它指向在当前 CPU 上执行的环境(代码正在运行)。</p>
  </li>
  <li>
    <p>Per-CPU system registers<br />
  所有寄存器，包括系统寄存器，都是 CPU 专用的。 因此，初始化这些寄存器的指令，例如 lcr3()，ltr()，lgdt()，lidt() 等，必须在每个 CPU 上执行一次。 为此，定义了函数 <code class="language-plaintext highlighter-rouge">env_init_percpu()</code> 和 <code class="language-plaintext highlighter-rouge">trap_init_percpu()</code>。</p>

    <p>除此之外，如果你在解决方案中添加了任何额外的 CPU 状态或执行了其他任何特定于 CPU 的初始化 (例如，在 CPU 寄存器中设置新位) 以挑战早期实验中的问题，请确保复制它们到每个 CPU 上！</p>
  </li>
</ul>

<h5 id="exercise-3">Exercise 3</h5>

<p>修改 <code class="language-plaintext highlighter-rouge">mem_init_mp()</code> (在 <code class="language-plaintext highlighter-rouge">kern/pmap.c</code> 中)以映射从 <code class="language-plaintext highlighter-rouge">KSTACKTOP</code> 开始的每个 CPU 堆栈，如 <code class="language-plaintext highlighter-rouge">inc/memlayout.h</code> 中所示。 每个堆栈的大小为 <code class="language-plaintext highlighter-rouge">KSTKSIZE</code> 字节加上未映射的保护页的 <code class="language-plaintext highlighter-rouge">KSTKGAP</code> 字节。 你的代码应该能通过 <code class="language-plaintext highlighter-rouge">check_kern_pgdir()</code> 中的检查。</p>

<p>mem_init_mp 代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">void</span> <span class="nf">mem_init_mp</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NCPU</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">uintptr_t</span> <span class="n">va</span> <span class="o">=</span> <span class="n">KSTACKTOP</span> <span class="o">-</span> <span class="n">i</span> <span class="o">*</span> <span class="p">(</span><span class="n">KSTKSIZE</span> <span class="o">+</span> <span class="n">KSTKGAP</span><span class="p">);</span>
        <span class="n">boot_map_region</span><span class="p">(</span><span class="n">kern_pgdir</span><span class="p">,</span> <span class="n">va</span> <span class="o">-</span> <span class="n">KSTKSIZE</span><span class="p">,</span> <span class="n">KSTKSIZE</span><span class="p">,</span>
            <span class="n">PADDR</span><span class="p">(</span><span class="n">percpu_kstacks</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">PTE_W</span> <span class="o">|</span> <span class="n">PTE_P</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>如果在进行分支合并的时候，出现了一定问题，比如没有将调用 mem_init_map 函数的代码合并进来，可以在 mem_init 函数中添加。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">check_kern_pgdir</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page_free_list</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page_installed_pgdir</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">SMP</span><span class="o">:</span> <span class="n">CPU</span> <span class="mi">0</span> <span class="n">found</span> <span class="mi">1</span> <span class="n">CPU</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">enabled</span> <span class="n">interrupts</span><span class="o">:</span> <span class="mi">1</span> <span class="mi">2</span>
<span class="p">[</span><span class="mo">00000000</span><span class="p">]</span> <span class="n">new</span> <span class="n">env</span> <span class="mo">00001000</span>
<span class="n">kernel</span> <span class="n">panic</span> <span class="n">on</span> <span class="n">CPU</span> <span class="mi">0</span> <span class="n">at</span> <span class="n">kern</span><span class="o">/</span><span class="n">trap</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">328</span><span class="o">:</span> <span class="n">Page</span> <span class="n">Fault</span> <span class="n">in</span> <span class="n">Kernel</span><span class="o">-</span><span class="n">Mode</span> <span class="n">at</span> <span class="mo">00000000</span><span class="p">.</span>
</code></pre></div></div>

<h5 id="exercise-4">Exercise 4</h5>

<p><code class="language-plaintext highlighter-rouge">trap_init_percpu()</code> (<code class="language-plaintext highlighter-rouge">kern/trap.c</code>)中的代码初始化 BSP 的 TSS 和 TSS 描述符。它能在实验 3 中工作，但在其他 CPU 上运行时不正确。更改代码，使其可以在所有 CPU 上使用。(注意：新代码不应再使用全局 ts 变量。)</p>

<p>代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">trap_init_percpu</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Setup a TSS so that we get the right stack when we trap to the kernel.</span>
    <span class="n">thiscpu</span><span class="o">-&gt;</span><span class="n">cpu_ts</span><span class="p">.</span><span class="n">ts_esp0</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uintptr_t</span><span class="p">)(</span><span class="n">percpu_kstacks</span><span class="p">[</span><span class="n">cpunum</span><span class="p">()]</span> <span class="o">+</span> <span class="n">KSTKSIZE</span><span class="p">);</span>
    <span class="n">thiscpu</span><span class="o">-&gt;</span><span class="n">cpu_ts</span><span class="p">.</span><span class="n">ts_ss0</span> <span class="o">=</span> <span class="n">GD_KD</span><span class="p">;</span>
    <span class="n">thiscpu</span><span class="o">-&gt;</span><span class="n">cpu_ts</span><span class="p">.</span><span class="n">ts_iomb</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Taskstate</span><span class="p">);</span>

    <span class="c1">// Initialize the TSS slot of the gdt.</span>
    <span class="n">gdt</span><span class="p">[(</span><span class="n">GD_TSS0</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cpunum</span><span class="p">()]</span> <span class="o">=</span> <span class="n">SEG16</span><span class="p">(</span><span class="n">STS_T32A</span><span class="p">,</span> <span class="p">(</span><span class="kt">uint32_t</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">thiscpu</span><span class="o">-&gt;</span><span class="n">cpu_ts</span><span class="p">)),</span>
                    <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Taskstate</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">gdt</span><span class="p">[(</span><span class="n">GD_TSS0</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cpunum</span><span class="p">()].</span><span class="n">sd_s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 加载 TSS 选择器（与其他分段选择器一样，底部的三位是特殊的；我们将其保留为0）</span>
    <span class="n">ltr</span><span class="p">(</span><span class="n">GD_TSS0</span> <span class="o">+</span> <span class="p">(</span><span class="n">cpunum</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">));</span>

    <span class="c1">// Load the IDT</span>
    <span class="n">lidt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">idt_pd</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">make qemu-nox CPUS=4</code>，可以得到如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">check_page_free_list</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page_alloc</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_kern_pgdir</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page_free_list</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">check_page_installed_pgdir</span><span class="p">()</span> <span class="n">succeeded</span><span class="o">!</span>
<span class="n">SMP</span><span class="o">:</span> <span class="n">CPU</span> <span class="mi">0</span> <span class="n">found</span> <span class="mi">4</span> <span class="n">CPU</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">enabled</span> <span class="n">interrupts</span><span class="o">:</span> <span class="mi">1</span> <span class="mi">2</span>
<span class="n">SMP</span><span class="o">:</span> <span class="n">CPU</span> <span class="mi">1</span> <span class="n">starting</span>
<span class="n">SMP</span><span class="o">:</span> <span class="n">CPU</span> <span class="mi">2</span> <span class="n">starting</span>
<span class="n">SMP</span><span class="o">:</span> <span class="n">CPU</span> <span class="mi">3</span> <span class="n">starting</span>
<span class="p">[</span><span class="mo">00000000</span><span class="p">]</span> <span class="n">new</span> <span class="n">env</span> <span class="mo">00001000</span>
<span class="n">kernel</span> <span class="n">panic</span> <span class="n">on</span> <span class="n">CPU</span> <span class="mi">0</span> <span class="n">at</span> <span class="n">kern</span><span class="o">/</span><span class="n">trap</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">326</span><span class="o">:</span> <span class="n">Page</span> <span class="n">Fault</span> <span class="n">in</span> <span class="n">Kernel</span><span class="o">-</span><span class="n">Mode</span> <span class="n">at</span> <span class="mo">00000000</span><span class="p">.</span>
</code></pre></div></div>

<p>内核错误，在完成 Exercise6 后，就不会出现了</p>

<h4 id="locking">Locking</h4>

<p>在 <code class="language-plaintext highlighter-rouge">mp_main()</code> 中初始化 AP 之后，我们当前的代码会自旋。在让 AP 进一步执行之前，我们需要首先解决多个 CPU 同时运行内核代码时的竞争状态。实现它的最简单方法的是使用大内核锁。大内核锁是单个的全局锁，每当环境进入内核模式时都会被持有，并在环境返回到用户模式时释放。在此模型中，用户模式下的环境可以在任何可用的 CPU 上同时运行，但是内核模式下只能运行一个环境。任何其他尝试进入内核模式的环境都必须等待。</p>

<p><code class="language-plaintext highlighter-rouge">kern/spinlock.h</code>声明了大的内核锁，即<code class="language-plaintext highlighter-rouge">kernel_lock</code>。它还提供<code class="language-plaintext highlighter-rouge">lock_kernel()</code>和<code class="language-plaintext highlighter-rouge">unlock_kernel()</code>，这是获取和释放锁的快捷方式。你应该在四个位置应用大内核锁：</p>

<ul>
  <li>在 <code class="language-plaintext highlighter-rouge">i386_init()</code> 中，在 BSP 唤醒其他 CPU 之前获取锁。</li>
  <li>在 <code class="language-plaintext highlighter-rouge">mp_main()</code> 中，在初始化 AP 之后获取锁，然后调用 <code class="language-plaintext highlighter-rouge">sched_yield()</code> 开始在此 AP 上运行环境。</li>
  <li>在 <code class="language-plaintext highlighter-rouge">trap()</code> 中，从用户模式发生异常时获取锁。要确定异常是在用户模式下还是内核模式下发生的，请检查 <code class="language-plaintext highlighter-rouge">tf_cs</code> 的低位。</li>
  <li>在 <code class="language-plaintext highlighter-rouge">env_run()</code> 中，在切换到用户模式之前立即释放锁。不要太早或太晚地这样做，否则会遇到竞争或死锁。</li>
</ul>

<p><a href="https://hehao98.github.io/posts/2019/04/xv6-3/">锁 参考</a></p>

<h5 id="exercise-5">Exercise 5</h5>

<p>如上所述，通过在适当的位置调用 <code class="language-plaintext highlighter-rouge">lock_kernel()</code> 和 <code class="language-plaintext highlighter-rouge">unlock_kernel()</code> 来应用大内核锁。</p>

<p><code class="language-plaintext highlighter-rouge">kern/init.c</code> 下的 <code class="language-plaintext highlighter-rouge">i386_init</code>：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Acquire the big kernel lock before waking up APs</span>
    <span class="c1">// Your code here:</span>
    <span class="n">lock_kernel</span><span class="p">();</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">kern/init.c</code> 下的 <code class="language-plaintext highlighter-rouge">mp_main</code>:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Now that we have finished some basic setup, call sched_yield()</span>
    <span class="c1">// to start running processes on this CPU.  But make sure that</span>
    <span class="c1">// only one CPU can enter the scheduler at a time!</span>
    <span class="c1">//</span>
    <span class="c1">// Your code here:</span>
    <span class="n">lock_kernel</span><span class="p">();</span>
    <span class="n">sched_yield</span><span class="p">();</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">kern/trap.c</code> 下的 <code class="language-plaintext highlighter-rouge">trap</code>:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">if</span> <span class="p">((</span><span class="n">tf</span><span class="o">-&gt;</span><span class="n">tf_cs</span> <span class="o">&amp;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Trapped from user mode.</span>
        <span class="c1">// Acquire the big kernel lock before doing any</span>
        <span class="c1">// serious kernel work.</span>
        <span class="c1">// LAB 4: Your code here.</span>
        <span class="n">lock_kernel</span><span class="p">();</span>
        <span class="n">assert</span><span class="p">(</span><span class="n">curenv</span><span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">kern/env.c</code> 下的 <code class="language-plaintext highlighter-rouge">env_run</code>:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">env_run</span><span class="p">(</span><span class="k">struct</span> <span class="n">Env</span> <span class="o">*</span><span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">curenv</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_status</span> <span class="o">==</span> <span class="n">ENV_RUNNING</span><span class="p">)</span>
        <span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_status</span> <span class="o">=</span> <span class="n">ENV_RUNNABLE</span><span class="p">;</span>
    <span class="n">curenv</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
    <span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_status</span> <span class="o">=</span> <span class="n">ENV_RUNNING</span><span class="p">;</span>
    <span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_runs</span><span class="o">++</span><span class="p">;</span>
    <span class="n">lcr3</span><span class="p">(</span><span class="n">PADDR</span><span class="p">(</span><span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_pgdir</span><span class="p">));</span>
    <span class="n">unlock_kernel</span><span class="p">();</span>
    <span class="n">env_pop_tf</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_tf</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="question-2">Question 2</h5>

<p>似乎使用大内核锁可以保证一次只有一个 CPU 可以运行内核代码。 为什么每个 CPU 仍需要单独的内核堆栈？ 描述一个即使使用大内核锁保护，使用共享内核堆栈也会出错的情况。</p>

<p>答: CPU0 正在处理用户态的中断，内核栈中存储了栈帧，此时 CPU1 的用户态程序也发生中断。因为锁是在 trap 函数中被调用的，在发生中断时，会先压栈再调用 trap 函数。</p>

<h3 id="轮循调度">轮循调度</h3>

<p>本实验中的下一个任务是更改 JOS 内核，以便它可以“循环”方式在多个环境之间交替。 JOS 中的循环调度工作方式如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kern/sched.c</code> 中的函数 <code class="language-plaintext highlighter-rouge">sched_yield()</code> 负责选择要运行的新环境。 它以循环方式依次搜索 <code class="language-plaintext highlighter-rouge">envs []</code> 数组，从先前运行的环境之后开始（如果没有先前运行的环境，则从数组的开头开始），选择状态为 <code class="language-plaintext highlighter-rouge">ENV_RUNNABLE</code> 的第一个环境（请参见 <code class="language-plaintext highlighter-rouge">inc/env.h</code>），然后调用 <code class="language-plaintext highlighter-rouge">env_run()</code> 运行该环境。</li>
  <li><code class="language-plaintext highlighter-rouge">sched_yield()</code>绝对不能在两个 CPU 上同时运行相同的环境。它可以表明某个环境当前正在某些 CPU（可能是当前 CPU ）上运行，因为该环境的状态为 <code class="language-plaintext highlighter-rouge">ENV_RUNNING</code>。</li>
  <li>我们为你实现了一个新的系统调用 <code class="language-plaintext highlighter-rouge">sys_yield()</code>，用户环境可以调用这个系统调用来调用内核的 <code class="language-plaintext highlighter-rouge">sched_yield()</code> 函数，从而自动将 CPU 让给其他的环境。</li>
</ul>

<h4 id="exercise-6">Exercise 6</h4>

<p>如上所述，在 <code class="language-plaintext highlighter-rouge">sched_yield()</code> 中实现循环调度。不要忘记修改 <code class="language-plaintext highlighter-rouge">syscall()</code> 来调用 <code class="language-plaintext highlighter-rouge">sys_yield()</code>。</p>

<p>确保在 <code class="language-plaintext highlighter-rouge">mp_main</code> 中调用 <code class="language-plaintext highlighter-rouge">sched_yield()</code>。</p>

<p>修改 <code class="language-plaintext highlighter-rouge">kern/init.c</code> 以创建三个（或更多！）环境，这些环境都运行程序 <code class="language-plaintext highlighter-rouge">user/yield.c</code>。</p>

<p>sched_yield 的实现：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">sched_yield</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">Env</span> <span class="o">*</span><span class="n">idle</span><span class="p">;</span>

    <span class="c1">// Implement simple round-robin scheduling.</span>
    <span class="c1">//</span>
    <span class="c1">// 在此环境最后一次运行 env 之后，以循环方式在 'envs' 中搜索 ENV_RUNNABLE 环境。</span>
    <span class="c1">// 切换到找到的第一个这样的环境。</span>
    <span class="c1">//</span>
    <span class="c1">// 如果没有可运行的环境，但是以前在此 CPU 上运行的环境仍然是 ENV_RUNNING，则可以选择该环境。</span>
    <span class="c1">//</span>
    <span class="c1">// 永远不要选择当前正在另一个 CPU 上运行的环境 (env_status == ENV_RUNNING)。</span>
    <span class="c1">// 如果没有可运行的环境，只需跳至下面的代码即可停止 CPU。</span>
    <span class="c1">// LAB 4: Your code here.</span>
    <span class="n">idle</span> <span class="o">=</span> <span class="n">curenv</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">idle_envid</span> <span class="o">=</span> <span class="p">(</span><span class="n">idle</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">ENVX</span><span class="p">(</span><span class="n">idle</span><span class="o">-&gt;</span><span class="n">env_id</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>

    <span class="c1">// 查找 idle 之后的环境</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">idle_envid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NENV</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">envs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">env_status</span> <span class="o">==</span> <span class="n">ENV_RUNNABLE</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">env_run</span><span class="p">(</span><span class="o">&amp;</span><span class="n">envs</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 查找 idle 之前的环境</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">idle_envid</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">envs</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">env_status</span> <span class="o">==</span> <span class="n">ENV_RUNNABLE</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">env_run</span><span class="p">(</span><span class="o">&amp;</span><span class="n">envs</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">idle</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">idle</span><span class="o">-&gt;</span><span class="n">env_status</span> <span class="o">==</span> <span class="n">ENV_RUNNING</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">env_run</span><span class="p">(</span><span class="n">idle</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// sched_halt never returns</span>
    <span class="n">sched_halt</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>syscall 函数添加如下代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">SYS_yield</span><span class="p">:</span>
    <span class="n">sys_yield</span><span class="p">();</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">break</span><span class="p">;</span>
</code></pre></div></div>

<p>不要忘记移除在 <code class="language-plaintext highlighter-rouge">kern/init.c mp_main()</code> 中的如下代码</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Remove this after you finish Exercise 6</span>
<span class="k">for</span> <span class="p">(;;);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">kern/init.c</code> 中的 <code class="language-plaintext highlighter-rouge">i386_init</code> 增加并修改如下代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#if defined(TEST)
</span>    <span class="c1">// Don't touch -- used by grading script!</span>
    <span class="n">ENV_CREATE</span><span class="p">(</span><span class="n">TEST</span><span class="p">,</span> <span class="n">ENV_TYPE_USER</span><span class="p">);</span>
<span class="cp">#else
</span>    <span class="c1">// Touch all you want.</span>
    <span class="c1">// ENV_CREATE(user_primes, ENV_TYPE_USER);</span>
    <span class="n">ENV_CREATE</span><span class="p">(</span><span class="n">user_yield</span><span class="p">,</span> <span class="n">ENV_TYPE_USER</span><span class="p">);</span>
    <span class="n">ENV_CREATE</span><span class="p">(</span><span class="n">user_yield</span><span class="p">,</span> <span class="n">ENV_TYPE_USER</span><span class="p">);</span>
    <span class="n">ENV_CREATE</span><span class="p">(</span><span class="n">user_yield</span><span class="p">,</span> <span class="n">ENV_TYPE_USER</span><span class="p">);</span>
<span class="cp">#endif // TEST*
</span></code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">make qemu-nox CPUS=2</code> 或者 <code class="language-plaintext highlighter-rouge">make qemu CPUS=2</code> 得到：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Hello</span><span class="p">,</span> <span class="n">I</span> <span class="n">am</span> <span class="n">environment</span> <span class="mo">00001000</span><span class="p">.</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">I</span> <span class="n">am</span> <span class="n">environment</span> <span class="mo">00001001</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001000</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">0</span><span class="p">.</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">I</span> <span class="n">am</span> <span class="n">environment</span> <span class="mo">00001002</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001001</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">0</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001000</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">1</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001002</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">0</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001001</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">1</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001000</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">2</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001002</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">1</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001001</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">2</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001000</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">3</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001002</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">2</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001001</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">3</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001000</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">4</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001002</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">3</span><span class="p">.</span>
<span class="n">All</span> <span class="n">done</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001000</span><span class="p">.</span>
<span class="p">[</span><span class="mo">00001000</span><span class="p">]</span> <span class="n">exiting</span> <span class="n">gracefully</span>
<span class="p">[</span><span class="mo">00001000</span><span class="p">]</span> <span class="n">free</span> <span class="n">env</span> <span class="mo">00001000</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001001</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">4</span><span class="p">.</span>
<span class="n">Back</span> <span class="n">in</span> <span class="n">environment</span> <span class="mo">00001002</span><span class="p">,</span> <span class="n">iteration</span> <span class="mi">4</span><span class="p">.</span>
</code></pre></div></div>

<p>在 yield 程序退出之后，系统中将没有可运行的环境，调度程序应调用 JOS 内核监视器。如果以上任何一种都没有发生，请在继续操作之前先修改你的代码。</p>

<h4 id="question-3">Question 3</h4>

<p>在 <code class="language-plaintext highlighter-rouge">env_run()</code> 的实现中，你应该调用了 <code class="language-plaintext highlighter-rouge">lcr3()</code>。 在调用 <code class="language-plaintext highlighter-rouge">lcr3()</code> 之前和之后，你的代码（至少应该）引用变量<code class="language-plaintext highlighter-rouge">e</code>（即 <code class="language-plaintext highlighter-rouge">env_run</code> 的参数）。 加载 <code class="language-plaintext highlighter-rouge">％cr3</code> 寄存器后，MMU 使用的寻址上下文将立即更改。 但是虚拟地址（即 <code class="language-plaintext highlighter-rouge">e</code>）相对于给定的地址上下文具有含义-地址上下文指定了虚拟地址映射到的物理地址。为什么在寻址切换之前和之后都可以取消对指针 <code class="language-plaintext highlighter-rouge">e</code> 的引用？</p>

<p>因为 e 指向的在 envs 中，而在创建环境的时候，envs 会被复制到环境中。</p>

<h4 id="question-4">Question 4</h4>

<p>每当内核从一种环境切换到另一种环境时，都必须确保保存了旧环境的寄存器，以便以后可以正确还原它们。为什么？这在哪里发生？</p>

<p>在 trap 处理函数中，将栈帧地址赋值给 env_tf 域。</p>

<h3 id="system-calls-for-environment-creation">System Calls for Environment Creation</h3>

<p>尽管你的内核现在可以在多个用户级别的环境中运行和切换，但仍限于内核最初设置的运行环境。现在，你将实现必要的JOS系统调用，以允许用户环境创建和启动其他新的用户环境。</p>

<p>Unix提供 <code class="language-plaintext highlighter-rouge">fork()</code> 系统调用作为其进程创建原语。 Unix <code class="language-plaintext highlighter-rouge">fork()</code> 复制调用进程（父进程）的整个地址空间，以创建一个新进程（子进程）。从用户空间可观察到的两个唯一区别是它们的进程 ID 和父进程 ID（由 <code class="language-plaintext highlighter-rouge">getpid</code> 和 <code class="language-plaintext highlighter-rouge">getppid</code> 返回）。在父进程中，<code class="language-plaintext highlighter-rouge">fork()</code> 返回子进程的进程 ID，而在子进程中，<code class="language-plaintext highlighter-rouge">fork()</code> 返回 0。默认情况下，每个进程都获得自己的私有地址空间，并且另一个进程对内存的修改对其他进程都不可见。</p>

<p>你将提供一组不同的，更原始的 JOS 系统调用，以创建新的用户模式环境。通过这些系统调用，除了其他样式的环境创建之外，你还可以完全在用户空间中实现类似 Unix 的 <code class="language-plaintext highlighter-rouge">fork()</code>。你将为JOS编写的新系统调用如下：</p>

<p>sys_exofork:<br />
该系统调用创建了一个几乎空白的新环境：在其地址空间的用户部分中未映射任何内容，并且该环境不可运行。调用<code class="language-plaintext highlighter-rouge">sys_exofork</code> 时，新环境将与父环境具有相同的寄存器状态。在父级中，sys_exofork 将返回新创建的环境的 envid_t（如果环境分配失败，则返回负数的错误代码）。但是，在子级中，它将返回 0。（由于该子级开始时标记为不可运行，因此 sys_exofork 实际上不会返回该子级，直到父级通过使用…标记该子级可显式允许该操作为止。）</p>

<p>sys_env_set_status:<br />
将指定环境的状态设置为 <code class="language-plaintext highlighter-rouge">ENV_RUNNABLE</code> 或 <code class="language-plaintext highlighter-rouge">ENV_NOT_RUNNABLE</code>。一旦其地址空间和寄存器状态已完全初始化，此系统调用通常用于标记准备运行的新环境。</p>

<p>sys_page_alloc:<br />
分配一页物理内存，并将其映射到指定环境的地址空间中的给定虚拟地址。</p>

<p>sys_page_map:<br />
将页面映射（不是页面的内容！）从一个环境的地址空间复制到另一个环境，保留被分配的内存共享，以便新映射和旧映射都引用同一物理内存页面。</p>

<p>sys_page_unmap:<br />
取消映射在给定环境中映射到给定虚拟地址的页面。</p>

<p>对于上面所有接受环境 ID 的系统调用，JOS 内核支持以下约定：值 0 表示 <code class="language-plaintext highlighter-rouge">当前环境</code>。此约定由 <code class="language-plaintext highlighter-rouge">kern/env.c</code> 中的<code class="language-plaintext highlighter-rouge">envid2env()</code> 实现。</p>

<p>我们在测试程序 <code class="language-plaintext highlighter-rouge">user/dumbfork.c</code> 中提供了一个类似于Unix的 <code class="language-plaintext highlighter-rouge">fork()</code> 的非常原始的实现。该测试程序使用上述系统调用来创建和运行带有其自身地址空间副本的子环境。然后，像前面的练习一样，使用 <code class="language-plaintext highlighter-rouge">sys_yield</code> 在两个环境之间来回切换。父级在 10 次迭代后退出，而子级在 20 次迭代后退出。</p>

<h4 id="exercise-7">Exercise 7</h4>

<p>在 <code class="language-plaintext highlighter-rouge">kern/syscall.c</code> 中实现上述系统调用，并确保 <code class="language-plaintext highlighter-rouge">syscall()</code> 调用它们。您将需要在 <code class="language-plaintext highlighter-rouge">kern/pmap.c</code> 和 <code class="language-plaintext highlighter-rouge">kern/env.c</code>中使用各种功能，尤其是 <code class="language-plaintext highlighter-rouge">envid2env()</code>。现在，无论何时调用 <code class="language-plaintext highlighter-rouge">envid2env()</code>，都要在 <code class="language-plaintext highlighter-rouge">checkperm</code> 参数中传递 1。确保检查所有无效的系统调用参数，在这种情况下返回 <code class="language-plaintext highlighter-rouge">-E_INVAL</code>。使用 <code class="language-plaintext highlighter-rouge">user/dumbfork</code> 测试您的 JOS 内核，并在继续之前确保其工作正常。</p>

<p>sys_exofork 代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">envid_t</span> <span class="nf">sys_exofork</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 从 kern / env.c 使用 env_alloc() 创建新环境。</span>
    <span class="c1">// 应该将其保留为 env_alloc 创建的状态，除了将状态设置为ENV_NOT_RUNNABLE,</span>
    <span class="c1">// 并从当前环境复制寄存器集外，但进行了调整，因此sys_exofork看起来将返回0。</span>

    <span class="c1">// LAB 4: Your code here.</span>
    <span class="k">struct</span> <span class="n">Env</span><span class="o">*</span> <span class="n">e</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">env_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_id</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">res</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">e</span><span class="o">-&gt;</span><span class="n">env_status</span> <span class="o">=</span> <span class="n">ENV_NOT_RUNNABLE</span><span class="p">;</span>
        <span class="n">e</span><span class="o">-&gt;</span><span class="n">env_tf</span> <span class="o">=</span> <span class="n">curenv</span><span class="o">-&gt;</span><span class="n">env_tf</span><span class="p">;</span>
        <span class="n">e</span><span class="o">-&gt;</span><span class="n">env_tf</span><span class="p">.</span><span class="n">tf_regs</span><span class="p">.</span><span class="n">reg_eax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">env_id</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>sys_env_set_status 函数如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">sys_env_set_status</span><span class="p">(</span><span class="n">envid_t</span> <span class="n">envid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">status</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// LAB 4: Your code here.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">ENV_RUNNABLE</span> <span class="o">||</span> <span class="n">status</span> <span class="o">==</span> <span class="n">ENV_NOT_RUNNABLE</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">struct</span> <span class="n">Env</span><span class="o">*</span> <span class="n">e</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">envid2env</span><span class="p">(</span><span class="n">envid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">e</span><span class="o">-&gt;</span><span class="n">env_status</span> <span class="o">=</span> <span class="n">status</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div>

<p>sys_page_alloc的代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="nf">sys_page_alloc</span><span class="p">(</span><span class="n">envid_t</span> <span class="n">envid</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">va</span><span class="p">,</span> <span class="kt">int</span> <span class="n">perm</span><span class="p">)</span>
<span class="p">{</span>

    <span class="c1">// LAB 4: Your code here.</span>
    <span class="c1">// panic("sys_page_alloc not implemented");</span>
    <span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span> <span class="n">va</span> <span class="o">&gt;=</span> <span class="n">UTOP</span> <span class="o">||</span> <span class="n">PGOFF</span><span class="p">(</span><span class="n">va</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="o">~</span><span class="n">perm</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">PTE_U</span> <span class="o">|</span> <span class="n">PTE_P</span><span class="p">)))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">perm</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">PTE_SYSCALL</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">struct</span> <span class="n">Env</span><span class="o">*</span> <span class="n">e</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">envid2env</span><span class="p">(</span><span class="n">envid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_BAD_ENV</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">struct</span> <span class="n">PageInfo</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">page_alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_NO_MEM</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">page_insert</span><span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">env_pgdir</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">va</span><span class="p">,</span> <span class="n">perm</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">page_free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>sys_page_map代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// perm 具有与 sys_page_alloc 中相同的限制，除了不能授予对只读页面的写访问权限。</span>
<span class="k">static</span> <span class="kt">int</span>
<span class="nf">sys_page_map</span><span class="p">(</span><span class="n">envid_t</span> <span class="n">srcenvid</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">srcva</span><span class="p">,</span> <span class="n">envid_t</span> <span class="n">dstenvid</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">dstva</span><span class="p">,</span> <span class="kt">int</span> <span class="n">perm</span><span class="p">)</span>
<span class="p">{</span>

    <span class="c1">// LAB 4: Your code here.</span>
    <span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">srcva</span> <span class="o">&gt;=</span> <span class="n">UTOP</span> <span class="o">||</span> <span class="n">PGOFF</span><span class="p">(</span><span class="n">srcva</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">dstva</span> <span class="o">&gt;=</span> <span class="n">UTOP</span> <span class="o">||</span> <span class="n">PGOFF</span><span class="p">(</span><span class="n">dstva</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">perm</span> <span class="o">&amp;</span> <span class="n">PTE_U</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">perm</span> <span class="o">&amp;</span> <span class="n">PTE_P</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">perm</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">PTE_SYSCALL</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Env</span> <span class="o">*</span><span class="n">src_e</span><span class="p">,</span> <span class="o">*</span><span class="n">dst_e</span><span class="p">;</span>

    <span class="c1">// 需不需要设置 checkperm，未知</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">envid2env</span><span class="p">(</span><span class="n">srcenvid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">src_e</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">envid2env</span><span class="p">(</span><span class="n">dstenvid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dst_e</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_BAD_ENV</span><span class="p">;</span>

    <span class="n">pte_t</span> <span class="o">*</span><span class="n">pte</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">PageInfo</span> <span class="o">*</span><span class="n">pp</span> <span class="o">=</span> <span class="n">page_lookup</span><span class="p">(</span><span class="n">src_e</span><span class="o">-&gt;</span><span class="n">env_pgdir</span><span class="p">,</span> <span class="n">srcva</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pte</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">pte</span> <span class="o">&amp;</span> <span class="n">PTE_W</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">perm</span> <span class="o">&amp;</span> <span class="n">PTE_W</span><span class="p">)</span> <span class="o">==</span> <span class="n">PTE_W</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">page_insert</span><span class="p">(</span><span class="n">dst_e</span><span class="o">-&gt;</span><span class="n">env_pgdir</span><span class="p">,</span> <span class="n">pp</span><span class="p">,</span> <span class="n">dstva</span><span class="p">,</span> <span class="n">perm</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_NO_MEM</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里有一个坑，envid2env 的 checkperm 的参数，必须是 0，如果设置了这个参数，那么 envid 必须指向当前进程或者当前进程的子进程，否则就会返回一个错误的结果。</p>

<p>sys_page_unmap 代码如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span>
<span class="nf">sys_page_unmap</span><span class="p">(</span><span class="n">envid_t</span> <span class="n">envid</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">va</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// LAB 4: Your code here.</span>
    <span class="k">if</span> <span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span> <span class="n">va</span> <span class="o">&gt;=</span> <span class="n">UTOP</span> <span class="o">||</span> <span class="n">PGOFF</span><span class="p">(</span><span class="n">va</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_INVAL</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">struct</span> <span class="n">Env</span> <span class="o">*</span><span class="n">e</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">envid2env</span><span class="p">(</span><span class="n">envid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">E_BAD_ENV</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">page_remove</span><span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">env_pgdir</span><span class="p">,</span> <span class="n">va</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>syscall 函数添加如下代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="n">SYS_exofork</span><span class="p">:</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">sys_exofork</span><span class="p">();</span>
    <span class="k">break</span><span class="p">;</span>
<span class="k">case</span> <span class="n">SYS_env_set_status</span><span class="p">:</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">sys_env_set_status</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
<span class="k">case</span> <span class="n">SYS_page_alloc</span><span class="p">:</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">sys_page_alloc</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
<span class="k">case</span> <span class="n">SYS_page_map</span><span class="p">:</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">sys_page_map</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">a4</span><span class="p">,</span> <span class="n">a5</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
<span class="k">case</span> <span class="n">SYS_page_unmap</span><span class="p">:</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">sys_page_unmap</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">a2</span><span class="p">);</span>
    <span class="k">break</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">make grade</code>，现在能通过 Part A 的测试了</p>
:ET